version: "3"
services:
  db:
    env_file: .env.prod
    # TODO: Add Kafka pub/sub to perform operations after receieving data from stream.
    profiles: ["backend", "db"]
    image: neo4j:latest
    restart: unless-stopped
    ports:
      - ${N4J_BOLT_PORTl-7687}:7687
      - ${N4J_HTTP_PORT:-7474}:7474
        # - ${N4J_HTTPS_PORT:-8473}:7473 # For Https
    environment:
      - NEO4J_AUTH=${N4J_AUTH:-neo4j/test}
    volumes:
      - ${N4J_DATA_DIR:-./neo4j/data}:/data
      - ${N4J_LOGS_DIR:-./neo4j/logs}:/logs
      - ${N4J_IMPORT_DIR:-./neo4j/import}:/var/lib/neo4j/import
      - ${N4J_PLUGIN_DIR:-./neo4j/plugins}:/plugins
        # - ${N4J_CONF_DIR:-./neo4j/conf}:/conf Only ever use config file or env variables

  cache:
    env_file: .env.prod
    profiles: ["backend", "cache", "webrtc"]
    image: redis
    restart: unless-stopped
    ports:
      - ${REDIS_HTTP_PORT:-6379}:6379
    command: redis-server /usr/local/etc/redis
    volumes:
      - ${REDIS_CONF:-./redis}:/usr/local/etc/redis
      - ${REDIS_ACL:-./redis/users.acl}:/etc/redis/users.acl

  sfu:
    env_file: .env.prod
    # TODO: Add prometheus to monitor service, port: 7789
    profiles: ["webrtc", "backend"]
    image: livekit/livekit-server
    restart: unless-stopped
    ports:
      - ${LK_SERVER_PORT:-7880}:7880
      - ${LK_TCP_PORT:-7881}:7881
      - ${LK_UDP_PORT:-7882}:7882/udp
    command: --config /livekit.yaml
    volumes:
      - ${LKCONFIG_PATH:-./livekit.yaml}:/livekit.yaml
    depends_on: # This will deprecate in near future.
      - stun
      - cache

  stun:
    env_file: .env.prod
    # TODO: Use prometheus for monitoring status, port: 9641
    profiles: ["backend", "webrtc", "stun"]
    image: instrumentisto/coturn
    restart: unless-stopped
    network_mode: "host" # Docker does not work well with large port ranges
    tmpfs:
      - /var/lib/coturn
    volumes:
      - ${TURNSERVER_CONFIG:-./stun/turnserver.conf}:/etc/coturn/turnserver.conf

  recorder:
    profiles: ["webrtc", "backend"]
    image: livekit/egress
    restart: unless-stopped
    environment:
      - EGRESS_CONFIG_FILE=/out/config.yaml
    volumes:
      - ${EGRESS_CONFIG_PATH:-./egress.yaml}:/out/config.yaml

  ai:
    env_file: .env.prod
    profiles: ["ai", "backend"]
    image: openvino/model_server
    ports:
      - ${OPENVINO_RPC_PORT:-9001}:9001
      - ${OPENVINO_REST_PORT:-8001}:8001
    volumes:
      - ${MODELS_PATH:-./openvino/models}:/models/
      - ${MODEL_SERVER_CONFIG:-./openvino/config.json}:/opt/ml/config.json
    command: --config_path /opt/ml/config.json --port 9001 --rest_port 8001

  object_store:
    profiles: ["object_store", "backend"]
    image: minio/minio
    ports:
      - ${MINIO_PORT:-9000}:9000
    volumes:
      - ${MINIO_DATA_PATH:-./minio/.minio/data}:/export
      - ${MINIO_CONFIG_PATH:-./minio/.minio/config}:/root/.minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-foobar}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-foobarfoobarfoobar}
      - MINIO_HTTP_TRACE=/stdout
    command: server /export

  rtmp_stream:
    profiles: ["webrtc", "backend"]
    image: aler9/rtsp-simple-server
    ports: 
      - 8554:8554
      - 1935:1935
      - 8888:8888

  # ai_server:
  #   env_file: .env.prod
  #   profiles: ["ai", "openvino", "backend"]
  #   build: ./ai
  #   ports:
  #     - ":"